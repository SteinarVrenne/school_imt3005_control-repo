# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: ubuntu

pipelines:
  default:
    - step:
        name: 'Build and validation of pp files'
        script:
          - export DEBIAN_FRONTEND=noninteractive
          - apt update -yq
          # shellcheck validation of scripts
          - apt install shellcheck -yq
          - shellcheck scripts/kali/*.sh
          - shellcheck -e SC2154 scripts/kali/script/*.sh
          - shellcheck scripts/kali/script/legacy/*.sh
          - shellcheck scripts/lib/*.sh
          # puppet validation
          - apt install wget -yq
          - tempdeb=$(mktemp /tmp/debpackage.XXXXXXXXXXXXXXXXXX) || exit 1
          - i=0;
          - wget -O "$tempdeb" https://apt.puppetlabs.com/puppet6-release-bionic.deb
          - ret="$?"
          - while [ "$i" -lt "5" ] && [ "$ret" -ne "0" ]; do wget -O "$tempdeb" https://apt.puppetlabs.com/puppet6-release-bionic.deb ; ret="$?" ; let "i++" ; done
          - if [ "$ret" -ne "0" ]; then exit 1003; fi
          - dpkg -i "$tempdeb"
          - apt update -yq
          - apt install puppetserver -yq
          - apt install puppet-lint -yq
          - /opt/puppetlabs/bin/puppet --version
          # Lint
          #- which puppet-lint
          - /usr/bin/puppet-lint site-modules/*/manifests/*.pp
          - /usr/bin/puppet-lint manifests/site.pp
          # Validate
          - /opt/puppetlabs/bin/puppet parser validate manifests/site.pp
          - /opt/puppetlabs/bin/puppet parser validate site-modules/*/manifests/*.pp
#    - step:
#        name: 'Lint'
#        script:
#          - puppet-lint site-modules/*/manifests/*.pp
#          - puppet-lint manifests/site.pp
#    - step:
#        name: 'Test'
#        script:
#          - echo "Your security scan goes here..."
#
#    # The following deployment steps will be executed for each pipeline run. To configure your steps and conditionally deploy see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/
#    - step:
#        name: 'Deployment to Staging'
#        deployment: staging
#        script:
#          - echo "Your deployment to staging script goes here..."
#    - step:
#        name: 'Deployment to Production'
#        deployment: production
#        trigger: 'manual'
#        script:
#          - echo "Your deployment to production script goes here..."
#
